stages:
  - build
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  CONTAINER_DEV_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

services:
  - docker:dind

build_app:
  image: docker:latest
  stage: build
  script:
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    # if you have arguments such as API keys you want to pass into your docker container then you can add them as --buid-arg MYKEY=$KEYVALUE
    #- docker build --pull -t ${CONTAINER_DEV_IMAGE} --build-arg MYKEY="$KEYVALUE" .
    - docker build --pull -t ${CONTAINER_DEV_IMAGE} .
    - docker push ${CONTAINER_DEV_IMAGE}


deploy:
  stage: deploy
  image: alpine
  environment:
    name: production
    url: https://example.com   # TODO: change me to your domain
  only:
    refs:
      - master
  script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - kubectl version
    - 'printf "apiVersion: v1\nkind: Secret\n$(kubectl create secret docker-registry gitlab-registry --docker-server=$CI_REGISTRY --docker-username=$GITLAB_DEPLOY_TOKEN_USER --docker-password=$GITLAB_DEPLOY_TOKEN_PASSWORD --docker-email=$GITLAB_USER_EMAIL -o yaml --dry-run)" | kubectl apply -f -'
    - sed 's/_APP_NAME_/'"$CI_PROJECT_NAME"'/g; s/_CI_GEGISTRY_/'"$CI_REGISTRY_IMAGE"'/g; s/_VERSION_/'"$CI_COMMIT_SHA"'/g; s/_HOST_NAME_/example.com/g' kubernetes.tpl.yml > kubernetes.yml;
    - kubectl apply -f kubernetes.yml
